getwd()
rm(list=ls())#
#
### LOAD PACKAGES#
library(MASS)#
library(splines)#
### SET SEED#
set.seed(1)#
#
### DEFINE FUNCTIONS#
expit<-function(x){return(exp(x)/(1+exp(x)))}#
#
#function to get natural spline basis with 3 knots. (Just an alternate definition. See Ch 11 of Wakefield (2013))#
get.ns.basis<-function(obs.data,knots){#
	od.k1<- obs.data-knots[1]#
	od.k1[od.k1<0]<-0#
	od.k2<- obs.data-knots[2]#
	od.k2[od.k2<0]<-0#
	od.k3<- obs.data-knots[3]#
	od.k3[od.k3<0]<-0#
	return(as.vector((od.k1^3 - od.k3^3)/(knots[3]-knots[1]) - (od.k2^3 - od.k3^3)/(knots[3]-knots[2])))}#
### DEFINE PARAMETER VALUES (similar to posterior estimates)#
p_eta <- 0.22#
#
mu_int <- c(1.36, 1.61)#
mu_slope <- c(0.26,0.51)#
mu.mat <- as.matrix(rbind(mu_int, mu_slope))#
#
Sigma <- matrix(c(0.55^2, 0.04, 0.04, 0.4^2), nrow=2, ncol=2)#
sigma_res <- 0.3#
#
beta <- c(0.31)#
#
nu.bx<-c(0, 0.5, -0.15, 1, -0.1, 0.7, -0.2, 0.2 , -0.5)#
#int, age, age.ns, time, time.ns, sec.time, sec.time,ns, # previous biopsies, eta#
#
gam.rc<-c(-2, 0.5, -0.2, -0.1, 0.25, 2)#
#int, age, time, time.ns, sec.time, eta#
#
omega.surg<-c(-4, -0.4, -1, 1, -0.1,  0.8, -0.3, -0.2, 1.5, 0.6, 2.5)#
#int, age, age.ns, time, time.ns, sec.time, sec.time.ns, # previous biopsies, previous reclassification (Gleason >=7), eta, interaction with previous G7 and eta#
#
#from real data, for design matrices for biopsy data#
mean.age.bx<-69.4#
sd.age.bx<-6.5#
knots.age.bx<- c(-0.5, 0.1, 0.7)#
#
knots.time.bx<- c(1.3, 3.2, 5.8)#
#
mean.sec.time.bx<-4.5#
sd.sec.time.bx<-4.1#
knots.sec.time.bx<-c(-0.5,0.3,0.9)#
### SIMULATE DATA#
n <- 1000#
id <- c(1:n)#
#
ages.dx <- rnorm(n, mean=65.5, sd=5.5) #from real data#
sec.time.dx <- rnorm(n, mean=1.6, sd=4.3)  #secular time, in relation to 2005#
pt.data<-as.data.frame(cbind(id,ages.dx, sec.time.dx))#
names(pt.data) <- c("id","age.dx","sec.time.dx")#
#
#latent class#
pt.data$eta.true <- eta.true <- rbinom(n,1,p_eta)#
table(pt.data$eta.true)#
### all biopsy data#
#
times<-seq(1,10,1)#
#
ids<-c(rep(1,10))#
for(i in 2:n){ids<-c(ids,rep(i,10))}#
#
bx.sim<-as.data.frame(cbind(ids, rep(times,n)))#
names(bx.sim)<-c("id","time")#
#
(N<-dim(bx.sim)[1])#
#
bx.sim$eta<-rep(0,N)#
for(i in 1:n){#
	bx.sim$eta[bx.sim$id==i]<-pt.data$eta.true[pt.data$id==i]}#
#
bx.sim$age<-bx.sim$sec.time<-rep(0,N)#
for(i in 1:n){#
	bx.sim$age[bx.sim$id==i]<-pt.data$age.dx[i] + bx.sim$time[bx.sim$id==1] + 0.5#
	bx.sim$sec.time[bx.sim$id==i]<-pt.data$sec.time.dx[i] + bx.sim$time[bx.sim$id==1] + 0.5}#
#
bx.sim$age.std<-(bx.sim$age-mean.age.bx)/sd.age.bx#
bx.sim$age.ns<-get.ns.basis(bx.sim$age.std, knots.age.bx)#
#
bx.sim$time.ns<-get.ns.basis(bx.sim$time,knots.time.bx)#
#
bx.sim$sec.time.std<-(bx.sim$sec.time-mean.sec.time.bx)/sd.sec.time.bx#
bx.sim$sec.time.ns<-get.ns.basis(bx.sim$sec.time, knots.sec.time.bx)#
#
bx.sim$rm<-rep(0,N)#
##biopsies#
bx.sim$bx.here<-rep(0,N)#
bx.sim$num.prev.bx<-rep(1,N)#
#
bx.sub<-bx.sim[bx.sim$time==1,]#
(n_bx<-dim(bx.sub)[1])#
U.BX<-as.matrix(cbind( rep(1,n_bx), bx.sub$age.std, bx.sub$age.ns, bx.sub$time, bx.sim$time.ns,  bx.sub$sec.time.std, bx.sub$sec.time.ns, bx.sub$num.prev.bx, bx.sub$eta  ))#
summary(as.vector(expit(U.BX%*%nu.bx)))#
#
bx.sim$bx.here[bx.sim$time==1]<-rbinom(n,1,as.vector(expit(U.BX%*%nu.bx)))#
#table(bx.sim$bx.here[bx.sim$time==1])#
#
for(j in 2:10){#
	for(i in 1:n){#
		bx.sim$num.prev.bx[bx.sim$id==i & bx.sim$time==j]<-sum(bx.sim$bx.here[bx.sim$id==i & bx.sim$time<j]) + 1}#
#
	bx.sub<-bx.sim[bx.sim$time==j,]#
	(n_bx<-dim(bx.sub)[1])#
	U.BX<-as.matrix(cbind( rep(1,n_bx), bx.sub$age.std, bx.sub$age.ns, bx.sub$time, bx.sim$time.ns,  bx.sub$sec.time.std, bx.sub$sec.time.ns, bx.sub$num.prev.bx, bx.sub$eta  ))#
	bx.sim$bx.here[bx.sim$time==j]<-rbinom(n,1,as.vector(expit(U.BX%*%nu.bx)))}#
table(bx.sim$bx.here)	#
#
#reclassifications#
bx.sim$rc<-bx.sim$prev.G7<-rep(0,N)#
rc.sub<-bx.sim[bx.sim$bx.here==1,]#
(n_rc<-dim(rc.sub)[1])#
V.RC<-as.matrix(cbind(rep(1,n_rc), rc.sub$age.std, rc.sub$time, rc.sub$time.ns, rc.sub$sec.time.std, rc.sub$eta))#
#
bx.sim$rc[bx.sim$bx.here==1]<-rbinom(n_rc,1,as.vector(expit(V.RC%*%gam.rc)))#
#
for(i in 1:n){#
	if(sum(bx.sim$rc[bx.sim$id==i]==1)>0){#
		rc.time<-min(bx.sim$time[bx.sim$rc==1 & bx.sim$id==i])#
		bx.sim$rc[bx.sim$id==i & bx.sim$time>rc.time]<-0#
		bx.sim$bx.here[bx.sim$id==i & bx.sim$time>rc.time]<-0#
		bx.sim$num.prev.bx[bx.sim$id==i & bx.sim$time>rc.time]<-(bx.sim$num.prev.bx[bx.sim$id==i & bx.sim$time==rc.time] + 1)#
		bx.sim$prev.G7[bx.sim$id==i & bx.sim$time>=rc.time]<-1#
		bx.sim$rm[bx.sim$id==i & bx.sim$time>(rc.time+2)]<-1}}#
# surgery#
bx.sim$rrp<-rep(0,N) #rrp is surgery (radical retropubic prostatectomy)#
bx.sim$num.prev.bx.rrp <- bx.sim$num.prev.bx + bx.sim$bx.here#
#
W.SURG<-as.matrix(cbind(rep(1,N), bx.sim$age.std, bx.sim$age.ns, bx.sim$time, bx.sim$time.ns, bx.sim$sec.time.std, bx.sim$sec.time.ns,bx.sim$num.prev.bx.rrp, bx.sim$prev.G7, bx.sim$eta, (bx.sim$prev.G7*bx.sim$eta) ))#
#
bx.sim$rrp<-rbinom(N,1,as.vector(expit(W.SURG%*%omega.surg)))#
#
#messes up design matrices to delete columns earlier#
bx.sim<-bx.sim[bx.sim$rm==0,]#
(N<-dim(bx.sim)[1])#
pt.data$rc<-pt.data$rrp<-rep(0,n)#
#
for(i in 1:n){#
	if(sum(bx.sim$rrp[bx.sim$id==i])>0){#
		rrp.time<-min(bx.sim$time[bx.sim$id==i & bx.sim$rrp==1])#
		bx.sim$rm[bx.sim$id==i & bx.sim$time>rrp.time]<-1	#
		pt.data$rrp[pt.data$id==i]<-1}	}#
table(pt.data$rrp)#
bx.sim<-bx.sim[bx.sim$rm==0,]#
(N<-dim(bx.sim)[1])#
#
for(i in 1:n){#
	pt.data$rc[i]<-sum(bx.sim$rc[bx.sim$id==pt.data$id[i]])}#
table(pt.data$rc) #
#
pt.data$obs.eta<-rep(NA,n)#
pt.data$obs.eta[pt.data$rrp==1]<-pt.data$eta.true[pt.data$rrp==1]#
table(pt.data$obs.eta)#
#
for(i in 1:n){#
	if(max(bx.sim$rc[bx.sim$id==i])==1){#
		rc.time<-bx.sim$time[bx.sim$rc==1 & bx.sim$id==i]#
		bx.sim$bx.here[bx.sim$id==i & bx.sim$time>rc.time]<-NA	} }#
#
table(bx.sim$bx.here)#
write.csv(pt.data,"pt-data-sim.csv")#
write.csv(bx.sim,"bx-data-sim.csv")#
##psa data#
#
psa.time<-seq(-1, max(bx.sim$time[bx.sim$id==1]),0.5)#
psa.id<-rep(1, length(psa.time))#
#
for(i in 2:n){#
	psa.add<-seq(-1, max(bx.sim$time[bx.sim$id==i]), 0.5)#
	psa.time<-c(psa.time,psa.add)#
	psa.id<-c(psa.id, rep(i, length(psa.add)))}	#
psa.data<-as.data.frame(cbind(psa.id, psa.time))#
names(psa.data)<-c("id","psa.time")#
(n_obs_psa<-dim(psa.data)[1])#
#
psa.data$psa.time<-psa.data$psa.time + runif(n_obs_psa, min=-0.25, max=0.25)#
psa.data$age<-vector(length=n_obs_psa)#
for(j in 1:n_obs_psa){#
	psa.data$age[j] <- psa.data$psa.time[j] + pt.data$age[pt.data$id==psa.data$id[j]]}#
mean(psa.data$age) #69.53362#
sd(psa.data$age) #6.624688#
psa.data$age.std<-(psa.data$age-mean(psa.data$age))/sd(psa.data$age)#
#
pt.data$std.vol<-rnorm(n,0,1)#
psa.data$std.vol<-vector(length=n_obs_psa)#
for(i in 1:n){#
	psa.data$std.vol[psa.data$id==i] <- pt.data$std.vol[i]}#
#
b.vec <- matrix(nrow=n, ncol=2)#
for(i in 1:n){#
	b.vec[i,] <- mvrnorm(n=1, mu=mu.mat[,(pt.data$eta.true[pt.data$id==i]+1)], Sigma=Sigma)}#
#
#write.csv(b.vec,"b-vec-true.csv")#
psa.data$log.psa <- vector(length=n_obs_psa)#
for(j in 1:n_obs_psa){#
	lin.pred <- NULL#
	lin.pred <- sum(b.vec[pt.data$id==psa.data$id[j],] * c(1, psa.data$age.std[j])) + beta[1]*psa.data$std.vol[j]#
	psa.data$log.psa[j] <- rnorm(1, mean=lin.pred, sd=sigma_res)}#
summary(psa.data$log.psa)#
write.csv(psa.data,"psa-data-sim.csv")#
write.csv(pt.data,"pt-data-sim.csv")#
#get ordered subject variable#
#
pt.data<-pt.data[order(pt.data$obs.eta),]#
pt.data$subj<-c(1:n)#
psa.data$subj<-rep(0,n_obs_psa)#
for(i in 1:n){psa.data$subj[psa.data$id==pt.data$id[i]]<-pt.data$subj[i]}#
bx.sim$subj<-rep(0,N)#
for(i in 1:n){bx.sim$subj[bx.sim$id==pt.data$id[i]]<-pt.data$subj[i]}#
write.csv(psa.data,"psa-data-sim.csv")#
write.csv(pt.data,"pt-data-sim.csv")#
write.csv(bx.sim,"bx-data-sim.csv")
getwd
getwd()
setwd(/Users/ryc/GitHub/prediction-prostate-surveillance/simulation-data)
setwd(""/Users/ryc/GitHub/prediction-prostate-surveillance/simulation-data")
setwd("/Users/ryc/GitHub/prediction-prostate-surveillance/simulation-data")
rm(list=ls())#
#
### LOAD PACKAGES#
library(MASS)#
library(splines)#
### SET SEED#
set.seed(1)#
#
### DEFINE FUNCTIONS#
expit<-function(x){return(exp(x)/(1+exp(x)))}#
#
#function to get natural spline basis with 3 knots. (Just an alternate definition. See Ch 11 of Wakefield (2013))#
get.ns.basis<-function(obs.data,knots){#
	od.k1<- obs.data-knots[1]#
	od.k1[od.k1<0]<-0#
	od.k2<- obs.data-knots[2]#
	od.k2[od.k2<0]<-0#
	od.k3<- obs.data-knots[3]#
	od.k3[od.k3<0]<-0#
	return(as.vector((od.k1^3 - od.k3^3)/(knots[3]-knots[1]) - (od.k2^3 - od.k3^3)/(knots[3]-knots[2])))}#
### DEFINE PARAMETER VALUES (similar to posterior estimates)#
p_eta <- 0.22#
#
mu_int <- c(1.36, 1.61)#
mu_slope <- c(0.26,0.51)#
mu.mat <- as.matrix(rbind(mu_int, mu_slope))#
#
Sigma <- matrix(c(0.55^2, 0.04, 0.04, 0.4^2), nrow=2, ncol=2)#
sigma_res <- 0.3#
#
beta <- c(0.31)#
#
nu.bx<-c(0, 0.5, -0.15, 1, -0.1, 0.7, -0.2, 0.2 , -0.5)#
#int, age, age.ns, time, time.ns, sec.time, sec.time,ns, # previous biopsies, eta#
#
gam.rc<-c(-2, 0.5, -0.2, -0.1, 0.25, 2)#
#int, age, time, time.ns, sec.time, eta#
#
omega.surg<-c(-4, -0.4, -1, 1, -0.1,  0.8, -0.3, -0.2, 1.5, 0.6, 2.5)#
#int, age, age.ns, time, time.ns, sec.time, sec.time.ns, # previous biopsies, previous reclassification (Gleason >=7), eta, interaction with previous G7 and eta#
#
#from real data, for design matrices for biopsy data#
mean.age.bx<-69.4#
sd.age.bx<-6.5#
knots.age.bx<- c(-0.5, 0.1, 0.7)#
#
knots.time.bx<- c(1.3, 3.2, 5.8)#
#
mean.sec.time.bx<-4.5#
sd.sec.time.bx<-4.1#
knots.sec.time.bx<-c(-0.5,0.3,0.9)#
### SIMULATE DATA#
n <- 1000#
id <- c(1:n)#
#
ages.dx <- rnorm(n, mean=65.5, sd=5.5) #from real data#
sec.time.dx <- rnorm(n, mean=1.6, sd=4.3)  #secular time, in relation to 2005#
pt.data<-as.data.frame(cbind(id,ages.dx, sec.time.dx))#
names(pt.data) <- c("id","age.dx","sec.time.dx")#
#
#latent class#
pt.data$eta.true <- eta.true <- rbinom(n,1,p_eta)#
table(pt.data$eta.true)#
### all biopsy data#
#
times<-seq(1,10,1)#
#
ids<-c(rep(1,10))#
for(i in 2:n){ids<-c(ids,rep(i,10))}#
#
bx.sim<-as.data.frame(cbind(ids, rep(times,n)))#
names(bx.sim)<-c("id","time")#
#
(N<-dim(bx.sim)[1])#
#
bx.sim$eta<-rep(0,N)#
for(i in 1:n){#
	bx.sim$eta[bx.sim$id==i]<-pt.data$eta.true[pt.data$id==i]}#
#
bx.sim$age<-bx.sim$sec.time<-rep(0,N)#
for(i in 1:n){#
	bx.sim$age[bx.sim$id==i]<-pt.data$age.dx[i] + bx.sim$time[bx.sim$id==1] + 0.5#
	bx.sim$sec.time[bx.sim$id==i]<-pt.data$sec.time.dx[i] + bx.sim$time[bx.sim$id==1] + 0.5}#
#
bx.sim$age.std<-(bx.sim$age-mean.age.bx)/sd.age.bx#
bx.sim$age.ns<-get.ns.basis(bx.sim$age.std, knots.age.bx)#
#
bx.sim$time.ns<-get.ns.basis(bx.sim$time,knots.time.bx)#
#
bx.sim$sec.time.std<-(bx.sim$sec.time-mean.sec.time.bx)/sd.sec.time.bx#
bx.sim$sec.time.ns<-get.ns.basis(bx.sim$sec.time, knots.sec.time.bx)#
#
bx.sim$rm<-rep(0,N)#
##biopsies#
bx.sim$bx.here<-rep(0,N)#
bx.sim$num.prev.bx<-rep(1,N)#
#
bx.sub<-bx.sim[bx.sim$time==1,]#
(n_bx<-dim(bx.sub)[1])#
U.BX<-as.matrix(cbind( rep(1,n_bx), bx.sub$age.std, bx.sub$age.ns, bx.sub$time, bx.sim$time.ns,  bx.sub$sec.time.std, bx.sub$sec.time.ns, bx.sub$num.prev.bx, bx.sub$eta  ))#
summary(as.vector(expit(U.BX%*%nu.bx)))#
#
bx.sim$bx.here[bx.sim$time==1]<-rbinom(n,1,as.vector(expit(U.BX%*%nu.bx)))#
#table(bx.sim$bx.here[bx.sim$time==1])#
#
for(j in 2:10){#
	for(i in 1:n){#
		bx.sim$num.prev.bx[bx.sim$id==i & bx.sim$time==j]<-sum(bx.sim$bx.here[bx.sim$id==i & bx.sim$time<j]) + 1}#
#
	bx.sub<-bx.sim[bx.sim$time==j,]#
	(n_bx<-dim(bx.sub)[1])#
	U.BX<-as.matrix(cbind( rep(1,n_bx), bx.sub$age.std, bx.sub$age.ns, bx.sub$time, bx.sim$time.ns,  bx.sub$sec.time.std, bx.sub$sec.time.ns, bx.sub$num.prev.bx, bx.sub$eta  ))#
	bx.sim$bx.here[bx.sim$time==j]<-rbinom(n,1,as.vector(expit(U.BX%*%nu.bx)))}#
table(bx.sim$bx.here)	#
#
#reclassifications#
bx.sim$rc<-bx.sim$prev.G7<-rep(0,N)#
rc.sub<-bx.sim[bx.sim$bx.here==1,]#
(n_rc<-dim(rc.sub)[1])#
V.RC<-as.matrix(cbind(rep(1,n_rc), rc.sub$age.std, rc.sub$time, rc.sub$time.ns, rc.sub$sec.time.std, rc.sub$eta))#
#
bx.sim$rc[bx.sim$bx.here==1]<-rbinom(n_rc,1,as.vector(expit(V.RC%*%gam.rc)))#
#
for(i in 1:n){#
	if(sum(bx.sim$rc[bx.sim$id==i]==1)>0){#
		rc.time<-min(bx.sim$time[bx.sim$rc==1 & bx.sim$id==i])#
		bx.sim$rc[bx.sim$id==i & bx.sim$time>rc.time]<-0#
		bx.sim$bx.here[bx.sim$id==i & bx.sim$time>rc.time]<-0#
		bx.sim$num.prev.bx[bx.sim$id==i & bx.sim$time>rc.time]<-(bx.sim$num.prev.bx[bx.sim$id==i & bx.sim$time==rc.time] + 1)#
		bx.sim$prev.G7[bx.sim$id==i & bx.sim$time>=rc.time]<-1#
		bx.sim$rm[bx.sim$id==i & bx.sim$time>(rc.time+2)]<-1}}#
# surgery#
bx.sim$rrp<-rep(0,N) #rrp is surgery (radical retropubic prostatectomy)#
bx.sim$num.prev.bx.rrp <- bx.sim$num.prev.bx + bx.sim$bx.here#
#
W.SURG<-as.matrix(cbind(rep(1,N), bx.sim$age.std, bx.sim$age.ns, bx.sim$time, bx.sim$time.ns, bx.sim$sec.time.std, bx.sim$sec.time.ns,bx.sim$num.prev.bx.rrp, bx.sim$prev.G7, bx.sim$eta, (bx.sim$prev.G7*bx.sim$eta) ))#
#
bx.sim$rrp<-rbinom(N,1,as.vector(expit(W.SURG%*%omega.surg)))#
#
#messes up design matrices to delete columns earlier#
bx.sim<-bx.sim[bx.sim$rm==0,]#
(N<-dim(bx.sim)[1])#
pt.data$rc<-pt.data$rrp<-rep(0,n)#
#
for(i in 1:n){#
	if(sum(bx.sim$rrp[bx.sim$id==i])>0){#
		rrp.time<-min(bx.sim$time[bx.sim$id==i & bx.sim$rrp==1])#
		bx.sim$rm[bx.sim$id==i & bx.sim$time>rrp.time]<-1	#
		pt.data$rrp[pt.data$id==i]<-1}	}#
table(pt.data$rrp)#
bx.sim<-bx.sim[bx.sim$rm==0,]#
(N<-dim(bx.sim)[1])#
#
for(i in 1:n){#
	pt.data$rc[i]<-sum(bx.sim$rc[bx.sim$id==pt.data$id[i]])}#
table(pt.data$rc) #
#
pt.data$obs.eta<-rep(NA,n)#
pt.data$obs.eta[pt.data$rrp==1]<-pt.data$eta.true[pt.data$rrp==1]#
table(pt.data$obs.eta)#
#
for(i in 1:n){#
	if(max(bx.sim$rc[bx.sim$id==i])==1){#
		rc.time<-bx.sim$time[bx.sim$rc==1 & bx.sim$id==i]#
		bx.sim$bx.here[bx.sim$id==i & bx.sim$time>rc.time]<-NA	} }#
#
table(bx.sim$bx.here)#
write.csv(pt.data,"pt-data-sim.csv")#
write.csv(bx.sim,"bx-data-sim.csv")#
##psa data#
#
psa.time<-seq(-1, max(bx.sim$time[bx.sim$id==1]),0.5)#
psa.id<-rep(1, length(psa.time))#
#
for(i in 2:n){#
	psa.add<-seq(-1, max(bx.sim$time[bx.sim$id==i]), 0.5)#
	psa.time<-c(psa.time,psa.add)#
	psa.id<-c(psa.id, rep(i, length(psa.add)))}	#
psa.data<-as.data.frame(cbind(psa.id, psa.time))#
names(psa.data)<-c("id","psa.time")#
(n_obs_psa<-dim(psa.data)[1])#
#
psa.data$psa.time<-psa.data$psa.time + runif(n_obs_psa, min=-0.25, max=0.25)#
psa.data$age<-vector(length=n_obs_psa)#
for(j in 1:n_obs_psa){#
	psa.data$age[j] <- psa.data$psa.time[j] + pt.data$age[pt.data$id==psa.data$id[j]]}#
mean(psa.data$age) #69.53362#
sd(psa.data$age) #6.624688#
psa.data$age.std<-(psa.data$age-mean(psa.data$age))/sd(psa.data$age)#
#
pt.data$std.vol<-rnorm(n,0,1)#
psa.data$std.vol<-vector(length=n_obs_psa)#
for(i in 1:n){#
	psa.data$std.vol[psa.data$id==i] <- pt.data$std.vol[i]}#
#
b.vec <- matrix(nrow=n, ncol=2)#
for(i in 1:n){#
	b.vec[i,] <- mvrnorm(n=1, mu=mu.mat[,(pt.data$eta.true[pt.data$id==i]+1)], Sigma=Sigma)}#
#
#write.csv(b.vec,"b-vec-true.csv")#
psa.data$log.psa <- vector(length=n_obs_psa)#
for(j in 1:n_obs_psa){#
	lin.pred <- NULL#
	lin.pred <- sum(b.vec[pt.data$id==psa.data$id[j],] * c(1, psa.data$age.std[j])) + beta[1]*psa.data$std.vol[j]#
	psa.data$log.psa[j] <- rnorm(1, mean=lin.pred, sd=sigma_res)}#
summary(psa.data$log.psa)#
write.csv(psa.data,"psa-data-sim.csv")#
write.csv(pt.data,"pt-data-sim.csv")#
#get ordered subject variable#
#
pt.data<-pt.data[order(pt.data$obs.eta),]#
pt.data$subj<-c(1:n)#
psa.data$subj<-rep(0,n_obs_psa)#
for(i in 1:n){psa.data$subj[psa.data$id==pt.data$id[i]]<-pt.data$subj[i]}#
bx.sim$subj<-rep(0,N)#
for(i in 1:n){bx.sim$subj[bx.sim$id==pt.data$id[i]]<-pt.data$subj[i]}#
write.csv(psa.data,"psa-data-sim.csv")#
write.csv(pt.data,"pt-data-sim.csv")#
write.csv(bx.sim,"bx-data-sim.csv")
setwd("/Users/ryc/GitHub/prediction-prostate-surveillance")
rm(list=ls())
library("lme4")#
#get data#
pt.data<-read.csv("simulation-data/pt-data-sim.csv")#
#this contains one record per patient#
#patients are ordered so that those with surgery, i.e. eta observed, occur first. #
#
psa.data<-read.csv("simulation-data/psa-data-sim.csv")#
#this contains one record per psa observations per patient#
#
data.use<-read.csv("simulation-data/bx-data-sim.csv")#
#this contains one record per annual interval for each patient until surgery or censoring#
#
#remove last 5 years of data for selected patients#
pred.ids<-c(250:261) #
psa.data<-psa.data[!(psa.data$subj%in%pred.ids & psa.data$psa.time>5),] #
data.use<-data.use[!(data.use$subj%in%pred.ids & data.use$time>5),]#
#Before call to JAGS, get the data into simple matrices and vectors to send to JAGS#
(n<-dim(pt.data)[1]) #there are 1000 patients#
#get observed latent class for those with surgery#
eta.data<-pt.data$obs.eta#
(n_eta_known<-sum(!is.na(eta.data))) #214#
#PSA model#
(n_obs_psa<-dim(psa.data)[1])#
Y<-psa.data$log.psa#
subj_psa<-psa.data$subj#
#
#covariates with random effects #
#here, intercept and age (standardized)#
Z.data<-as.matrix(cbind(rep(1,n_obs_psa), psa.data$age.std))#
(d.Z<-dim(Z.data)[2])#
#
#covariates with only fixed effects#
#here, prostate volume (standardized)#
X.data<-as.matrix(cbind(psa.data$std.vol))#
(d.X<-dim(X.data)[2])#
#lmer fit to get starting value for covariance parameter in JAGS#
mod.lmer<-lmer(log.psa~ std.vol + (1+ age.std |id), data=psa.data)#
(var_vec <- apply(coef(mod.lmer)$id, 2, var)[1:d.Z])#
(var_vec <- c(var_vec[2], var_vec[1]))#
###bx data#
#
#IOP- biopsy performed model#
#remove patients who have already had RC observed but haven't had surgery or been censored#
bx.data<-data.use[!is.na(data.use$bx.here),] #
(n_bx<-dim(bx.data)[1])#
BX<-as.numeric(bx.data$bx.here) #indicator of biopsy in this interval#
subj_bx<-bx.data$subj#
#
#covariate matrix U for logistic regression predicting biopsy#
#here, age and NS df=2 (standardized), time and NS df=2 (since dx), calendar time and NS df=2 (standardized around Jan 1, 2015), number of previous biopsies #
U.BX.data<-as.matrix(cbind(rep(1,n_bx), bx.data$age.std, bx.data$age.ns, bx.data$time, bx.data$time.ns, bx.data$sec.time.std, bx.data$sec.time.ns, bx.data$num.prev.bx ))#
(d.U.BX<-dim(U.BX.data)[2]) ##
#outcome model (logistic regression for reclassification)#
#only use records where a biopsy occurred#
rc.data<-data.use[data.use$bx.here==1 & !is.na(data.use$bx.here),] #
(n_rc<-dim(rc.data)[1])#
RC<-as.numeric(rc.data$rc) #indicator of reclassificaiton in this interval#
subj_rc<-rc.data$subj#
#
#covariate matrix V for pooled logistic regression predicting reclassification#
#here, age (standardized), time since diagnosis (ns with 2 df), calendar time#
V.RC.data<-as.matrix(cbind(rep(1,n_rc),  rc.data$age.std, rc.data$time, rc.data$time.ns, rc.data$sec.time.std ))#
(d.V.RC<-dim(V.RC.data)[2]) #5#
#logistic regression for surgery (radical retropubic prostatectomy)#
#this uses all records in data.use, because patients always at risk of choosing surgery#
SURG<-as.numeric(data.use$rrp)#
(n_surg<-dim(data.use)[1])#
subj_surg<-data.use$subj#
#covariate matrix W for pooled logistic regression predicting surgery#
#here, age (standardized and ns with df=2), time since diagnosis (df=2), calendar time (standardized around Jan 1, 2005 and ns with 3df), number of previous biopsies, previous grade reclassification; interaction with eta and previous RC#
W.SURG.data<-as.matrix(cbind(rep(1,n_surg), data.use$age.std, data.use$age.ns, data.use$time, data.use$time.ns, data.use$sec.time.std, data.use$sec.time.ns, data.use$num.prev.bx.rrp, data.use$prev.G7)) #
(d.W.SURG<-dim(W.SURG.data)[2])
rm(list=ls())
library("lme4")#
#get data#
pt.data<-read.csv("simulation-data/pt-data-sim.csv")#
#this contains one record per patient#
#patients are ordered so that those with surgery, i.e. eta observed, occur first. #
#
psa.data<-read.csv("simulation-data/psa-data-sim.csv")#
#this contains one record per psa observations per patient#
#
data.use<-read.csv("simulation-data/bx-data-sim.csv")#
#this contains one record per annual interval for each patient until surgery or censoring#
#Before call to JAGS, get the data into simple matrices and vectors to send to JAGS#
(n<-dim(pt.data)[1]) #there are 1000 patients#
#get observed latent class for those with surgery, excluding subj for CV#
#
(eta.true<-pt.data$obs.eta[pt.data$subj==to.mask]) #save#
#
pt.data$obs.eta[pt.data$subj==to.mask]<-NA#
#
pt.data<-pt.data[order(pt.data$obs.eta),]#
eta.data<-pt.data$obs.eta#
(n_eta_known<-sum(!is.na(eta.data)))#
#
#re-number subjects#
pt.data$subj2<-c(1:n)#
#(subj.test<-pt.data$subj2[pt.data$subj==to.mask]-n_eta_known) #will be 1#
psa.data$subj2<-vector(length=dim(psa.data)[1])#
for(i in 1:n){psa.data$subj2[psa.data$subj==i]<-pt.data$subj2[pt.data$subj==i]}#
data.use$subj2<-vector(length=dim(data.use)[1])#
for(i in 1:n){data.use$subj2[data.use$subj==i]<-pt.data$subj2[pt.data$subj==i]}#
#PSA model#
(n_obs_psa<-dim(psa.data)[1])#
Y<-psa.data$log.psa#
subj_psa<-psa.data$subj2#
#
#covariates with random effects #
#here, intercept and age (standardized)#
Z.data<-as.matrix(cbind(rep(1,n_obs_psa), psa.data$age.std))#
(d.Z<-dim(Z.data)[2])#
#
#covariates with only fixed effects#
#here, prostate volume (standardized)#
X.data<-as.matrix(cbind(psa.data$std.vol))#
(d.X<-dim(X.data)[2])#
#lmer fit to get starting value for covariance parameter in JAGS#
mod.lmer<-lmer(log.psa~ std.vol + (1+ age.std |id), data=psa.data)#
(var_vec <- apply(coef(mod.lmer)$id, 2, var)[1:d.Z])#
(var_vec <- c(var_vec[2], var_vec[1]))#
###bx data#
#
#IOP- biopsy performed model#
#remove patients who have already had RC observed but haven't had surgery or been censored#
bx.data<-data.use[!is.na(data.use$bx.here),] #
(n_bx<-dim(bx.data)[1])#
BX<-as.numeric(bx.data$bx.here) #indicator of biopsy in this interval#
subj_bx<-bx.data$subj2#
#
#covariate matrix U for logistic regression predicting biopsy#
U.BX.data<-as.matrix(cbind(rep(1,n_bx), bx.data$age.std, bx.data$age.ns, bx.data$time, bx.data$time.ns, bx.data$sec.time.std, bx.data$sec.time.ns, bx.data$num.prev.bx ))#
(d.U.BX<-dim(U.BX.data)[2]) #
#outcome model (logistic regression for reclassification)#
#only use records where a biopsy occurred#
rc.data<-data.use[data.use$bx.here==1 & !is.na(data.use$bx.here),] #
(n_rc<-dim(rc.data)[1])#
RC<-as.numeric(rc.data$rc) #indicator of reclassificaiton in this interval#
subj_rc<-rc.data$subj2#
#
#covariate matrix V for pooled logistic regression predicting reclassification#
#here, age (standardized), time since diagnosis (ns with 2 df), calendar time#
V.RC.data<-as.matrix(cbind(rep(1,n_rc),  rc.data$age.std, rc.data$time, rc.data$time.ns, rc.data$sec.time.std ))#
(d.V.RC<-dim(V.RC.data)[2]) #5#
#logistic regression for surgery (radical retropubic prostatectomy)#
#this uses all records in data.use, because patients always at risk of choosing surgery#
SURG<-as.numeric(data.use$rrp)#
(n_surg<-dim(data.use)[1])#
subj_surg<-data.use$subj2#
#covariate matrix W for pooled logistic regression predicting surgery#
#here, age (standardized and ns with df=2), time since diagnosis (df=2), calendar time (standardized around Jan 1, 2005 and ns with 3df), number of previous biopsies, previous grade reclassification; interaction with eta and previous RC#
W.SURG.data<-as.matrix(cbind(rep(1,n_surg), data.use$age.std, data.use$age.ns, data.use$time, data.use$time.ns, data.use$sec.time.std, data.use$sec.time.ns, data.use$num.prev.bx.rrp, data.use$prev.G7)) ##
(d.W.SURG<-dim(W.SURG.data)[2])
getwd()
rm(list=ls())
setwd("/Users/ryc/GitHub/prediction-prostate-surveillance/simulation-data")
rm(list=ls())
library(MASS)
set.seed(1)
expit<-function(x){return(exp(x)/(1+exp(x)))}#
#
#function to get natural spline basis with 3 knots_ (Just an alternate definition. See Ch 11 of Wakefield (2013))#
get_ns_basis<-function(obs_data,knots){#
	od_k1<- obs_data-knots[1]#
	od_k1[od_k1<0]<-0#
	od_k2<- obs_data-knots[2]#
	od_k2[od_k2<0]<-0#
	od_k3<- obs_data-knots[3]#
	od_k3[od_k3<0]<-0#
	return(as.vector((od_k1^3 - od_k3^3)/(knots[3]-knots[1]) - (od_k2^3 - od_k3^3)/(knots[3]-knots[2])))}
p_eta <- 0.22#
#
mu_int <- c(1.36, 1.61)#
mu_slope <- c(0.26,0.51)#
mu_mat <- as.matrix(rbind(mu_int, mu_slope))#
#
Sigma <- matrix(c(0.55^2, 0.04, 0.04, 0.4^2), nrow=2, ncol=2)#
sigma_res <- 0.3#
#
beta <- c(0.31)#
#
nu_bx<-c(0, 0.5, -0.15, 1, -0.1, 0.7, -0.2, 0.2 , -0.5)#
#int, age, age_ns, time, time_ns, sec_time, sec_time,ns, # previous biopsies, eta#
#
gam_rc<-c(-2, 0.5, -0.2, -0.1, 0.25, 2)#
#int, age, time, time_ns, sec_time, eta#
#
omega_surg<-c(-4, -0.4, -1, 1, -0.1,  0.8, -0.3, -0.2, 1.5, 0.6, 2.5)#
#int, age, age_ns, time, time_ns, sec_time, sec_time_ns, # previous biopsies, previous reclassification (Gleason >=7), eta, interaction with previous G7 and eta#
#
#from real data, for design matrices for biopsy data#
mean_age_bx<-69.4#
sd_age_bx<-6.5#
knots_age_bx<- c(-0.5, 0.1, 0.7)#
#
knots_time_bx<- c(1.3, 3.2, 5.8)#
#
mean_sec_time_bx<-4.5#
sd_sec_time_bx<-4.1#
knots_sec_time_bx<-c(-0.5,0.3,0.9)
n <- 1000#
id <- c(1:n)#
#
ages_dx <- rnorm(n, mean=65.5, sd=5.5) #from real data#
sec_time_dx <- rnorm(n, mean=1.6, sd=4.3)  #secular time, in relation to 2005
pt_data<-as.data.frame(cbind(id,ages_dx, sec_time_dx))#
names(pt_data) <- c("id","age_dx","sec_time_dx")
pt_data$eta_true <- eta_true <- rbinom(n,1,p_eta)#
table(pt_data$eta_true)
times<-seq(1,10,1)#
#
ids<-c(rep(1,10))#
for(i in 2:n){ids<-c(ids,rep(i,10))}#
#
bx_sim<-as.data.frame(cbind(ids, rep(times,n)))#
names(bx_sim)<-c("id","time")#
#
(N<-dim(bx_sim)[1])#
#
bx_sim$eta<-rep(0,N)#
for(i in 1:n){#
	bx_sim$eta[bx_sim$id==i]<-pt_data$eta_true[pt_data$id==i]}#
#
bx_sim$age<-bx_sim$sec_time<-rep(0,N)#
for(i in 1:n){#
	bx_sim$age[bx_sim$id==i]<-pt_data$age_dx[i] + bx_sim$time[bx_sim$id==1] + 0.5#
	bx_sim$sec_time[bx_sim$id==i]<-pt_data$sec_time_dx[i] + bx_sim$time[bx_sim$id==1] + 0.5}#
#
bx_sim$age_std<-(bx_sim$age-mean_age_bx)/sd_age_bx#
bx_sim$age_ns<-get_ns_basis(bx_sim$age_std, knots_age_bx)#
#
bx_sim$time_ns<-get_ns_basis(bx_sim$time,knots_time_bx)#
#
bx_sim$sec_time_std<-(bx_sim$sec_time-mean_sec_time_bx)/sd_sec_time_bx#
bx_sim$sec_time_ns<-get_ns_basis(bx_sim$sec_time, knots_sec_time_bx)#
#
bx_sim$rm<-rep(0,N)
bx_sim$bx_here<-rep(0,N)#
bx_sim$num_prev_bx<-rep(1,N)#
#
bx_sub<-bx_sim[bx_sim$time==1,]#
(n_bx<-dim(bx_sub)[1])#
U_BX<-as.matrix(cbind( rep(1,n_bx), bx_sub$age_std, bx_sub$age_ns, bx_sub$time, bx_sim$time_ns,  bx_sub$sec_time_std, bx_sub$sec_time_ns, bx_sub$num_prev_bx, bx_sub$eta  ))#
summary(as.vector(expit(U_BX%*%nu_bx)))#
#
bx_sim$bx_here[bx_sim$time==1]<-rbinom(n,1,as.vector(expit(U_BX%*%nu_bx)))#
#table(bx_sim$bx_here[bx_sim$time==1])#
#
for(j in 2:10){#
	for(i in 1:n){#
		bx_sim$num_prev_bx[bx_sim$id==i & bx_sim$time==j]<-sum(bx_sim$bx_here[bx_sim$id==i & bx_sim$time<j]) + 1}#
#
	bx_sub<-bx_sim[bx_sim$time==j,]#
	(n_bx<-dim(bx_sub)[1])#
	U_BX<-as.matrix(cbind( rep(1,n_bx), bx_sub$age_std, bx_sub$age_ns, bx_sub$time, bx_sim$time_ns,  bx_sub$sec_time_std, bx_sub$sec_time_ns, bx_sub$num_prev_bx, bx_sub$eta  ))#
	bx_sim$bx_here[bx_sim$time==j]<-rbinom(n,1,as.vector(expit(U_BX%*%nu_bx)))}#
table(bx_sim$bx_here)
bx_sim$rc<-bx_sim$prev_G7<-rep(0,N)#
rc_sub<-bx_sim[bx_sim$bx_here==1,]#
(n_rc<-dim(rc_sub)[1])#
V_RC<-as.matrix(cbind(rep(1,n_rc), rc_sub$age_std, rc_sub$time, rc_sub$time_ns, rc_sub$sec_time_std, rc_sub$eta))#
#
bx_sim$rc[bx_sim$bx_here==1]<-rbinom(n_rc,1,as.vector(expit(V_RC%*%gam_rc)))#
#
for(i in 1:n){#
	if(sum(bx_sim$rc[bx_sim$id==i]==1)>0){#
		rc_time<-min(bx_sim$time[bx_sim$rc==1 & bx_sim$id==i])#
		bx_sim$rc[bx_sim$id==i & bx_sim$time>rc_time]<-0#
		bx_sim$bx_here[bx_sim$id==i & bx_sim$time>rc_time]<-0#
		bx_sim$num_prev_bx[bx_sim$id==i & bx_sim$time>rc_time]<-(bx_sim$num_prev_bx[bx_sim$id==i & bx_sim$time==rc_time] + 1)#
		bx_sim$prev_G7[bx_sim$id==i & bx_sim$time>=rc_time]<-1#
		bx_sim$rm[bx_sim$id==i & bx_sim$time>(rc_time+2)]<-1}}
bx_sim$surg<-rep(0,N) #
bx_sim$num_prev_bx_surg <- bx_sim$num_prev_bx + bx_sim$bx_here#
#
W_SURG<-as.matrix(cbind(rep(1,N), bx_sim$age_std, bx_sim$age_ns, bx_sim$time, bx_sim$time_ns, bx_sim$sec_time_std, bx_sim$sec_time_ns,bx_sim$num_prev_bx_surg, bx_sim$prev_G7, bx_sim$eta, (bx_sim$prev_G7*bx_sim$eta) ))#
#
bx_sim$surg<-rbinom(N,1,as.vector(expit(W_SURG%*%omega_surg)))#
#
#messes up design matrices to delete columns earlier#
bx_sim<-bx_sim[bx_sim$rm==0,]#
(N<-dim(bx_sim)[1])#
pt_data$rc<-pt_data$surg<-rep(0,n)#
#
for(i in 1:n){#
	if(sum(bx_sim$surg[bx_sim$id==i])>0){#
		surg_time<-min(bx_sim$time[bx_sim$id==i & bx_sim$surg==1])#
		bx_sim$rm[bx_sim$id==i & bx_sim$time>surg_time]<-1	#
		pt_data$surg[pt_data$id==i]<-1}	}#
table(pt_data$surg)#
bx_sim<-bx_sim[bx_sim$rm==0,]#
(N<-dim(bx_sim)[1])#
#
for(i in 1:n){#
	pt_data$rc[i]<-sum(bx_sim$rc[bx_sim$id==pt_data$id[i]])}#
table(pt_data$rc) #
#
pt_data$obs_eta<-rep(NA,n)#
pt_data$obs_eta[pt_data$surg==1]<-pt_data$eta_true[pt_data$surg==1]#
table(pt_data$obs_eta)#
#
for(i in 1:n){#
	if(max(bx_sim$rc[bx_sim$id==i])==1){#
		rc_time<-bx_sim$time[bx_sim$rc==1 & bx_sim$id==i]#
		bx_sim$bx_here[bx_sim$id==i & bx_sim$time>rc_time]<-NA	} }#
#
table(bx_sim$bx_here)
write.csv(pt_data,"pt-data-sim.csv")#
write.csv(bx_sim,"bx-data-sim.csv")
psa_time<-seq(-1, max(bx_sim$time[bx_sim$id==1]),0.5)#
psa_id<-rep(1, length(psa_time))#
#
for(i in 2:n){#
	psa_add<-seq(-1, max(bx_sim$time[bx_sim$id==i]), 0.5)#
	psa_time<-c(psa_time,psa_add)#
	psa_id<-c(psa_id, rep(i, length(psa_add)))}
psa_data<-as.data.frame(cbind(psa_id, psa_time))#
names(psa_data)<-c("id","psa_time")#
(n_obs_psa<-dim(psa_data)[1])#
#
psa_data$psa_time<-psa_data$psa_time + runif(n_obs_psa, min=-0.25, max=0.25)#
psa_data$age<-vector(length=n_obs_psa)#
for(j in 1:n_obs_psa){#
	psa_data$age[j] <- psa_data$psa_time[j] + pt_data$age[pt_data$id==psa_data$id[j]]}
mean(psa_data$age) #69.53362#
sd(psa_data$age) #6.624688#
psa_data$age_std<-(psa_data$age-mean(psa_data$age))/sd(psa_data$age)
pt_data$vol_std<-rnorm(n,0,1)#
psa_data$vol_std<-vector(length=n_obs_psa)#
for(i in 1:n){#
	psa_data$vol_std[psa_data$id==i] <- pt_data$vol_std[i]}#
#
b.vec <- matrix(nrow=n, ncol=2)#
for(i in 1:n){#
	b.vec[i,] <- mvrnorm(n=1, mu=mu_mat[,(pt_data$eta_true[pt_data$id==i]+1)], Sigma=Sigma)}
psa_data$log_psa <- vector(length=n_obs_psa)#
for(j in 1:n_obs_psa){#
	lin_pred <- NULL#
	lin_pred <- sum(b.vec[pt_data$id==psa_data$id[j],] * c(1, psa_data$age_std[j])) + beta[1]*psa_data$vol_std[j]#
	psa_data$log_psa[j] <- rnorm(1, mean=lin_pred, sd=sigma_res)}#
summary(psa_data$log_psa)#
write.csv(psa_data,"psa-data-sim.csv")#
write.csv(pt_data,"pt-data-sim.csv")#
#get ordered subject variable#
#
pt_data<-pt_data[order(pt_data$obs_eta),]#
pt_data$subj<-c(1:n)#
psa_data$subj<-rep(0,n_obs_psa)#
for(i in 1:n){psa_data$subj[psa_data$id==pt_data$id[i]]<-pt_data$subj[i]}#
bx_sim$subj<-rep(0,N)#
for(i in 1:n){bx_sim$subj[bx_sim$id==pt_data$id[i]]<-pt_data$subj[i]}#
write.csv(psa_data,"psa-data-sim.csv")#
write.csv(pt_data,"pt-data-sim.csv")#
write.csv(bx_sim,"bx-data-sim.csv")
getwd()
setwd("/Users/ryc/GitHub/prostate-surveillance/simulation-data")
setwd("/Users/ryc/GitHub/prostate_surveillance/simulation-data")
rm(list=ls())#
#
### LOAD PACKAGES#
library(MASS)#
### SET SEED#
set.seed(1)#
#
### DEFINE FUNCTIONS#
expit<-function(x){return(exp(x)/(1+exp(x)))}#
#
#function to get natural spline basis with 3 knots_ (Just an alternate definition. See Ch 11 of Wakefield (2013))#
get_ns_basis<-function(obs_data,knots){#
	od_k1<- obs_data-knots[1]#
	od_k1[od_k1<0]<-0#
	od_k2<- obs_data-knots[2]#
	od_k2[od_k2<0]<-0#
	od_k3<- obs_data-knots[3]#
	od_k3[od_k3<0]<-0#
	return(as.vector((od_k1^3 - od_k3^3)/(knots[3]-knots[1]) - (od_k2^3 - od_k3^3)/(knots[3]-knots[2])))}#
### DEFINE PARAMETER VALUES (similar to posterior estimates)#
p_eta <- 0.22#
#
mu_int <- c(1.36, 1.61)#
mu_slope <- c(0.26,0.51)#
mu_mat <- as.matrix(rbind(mu_int, mu_slope))#
#
Sigma <- matrix(c(0.55^2, 0.04, 0.04, 0.4^2), nrow=2, ncol=2)#
sigma_res <- 0.3#
#
beta <- c(0.31)#
#
nu_bx<-c(0, 0.5, -0.15, 1, -0.1, 0.7, -0.2, 0.2 , -0.5)#
#int, age, age_ns, time, time_ns, sec_time, sec_time,ns, # previous biopsies, eta#
#
gam_rc<-c(-2, 0.5, -0.2, -0.1, 0.25, 2)#
#int, age, time, time_ns, sec_time, eta#
#
omega_surg<-c(-4, -0.4, -1, 1, -0.1,  0.8, -0.3, -0.2, 1.5, 0.6, 2.5)#
#int, age, age_ns, time, time_ns, sec_time, sec_time_ns, # previous biopsies, previous reclassification (Gleason >=7), eta, interaction with previous G7 and eta#
#
#from real data, for design matrices for biopsy data#
mean_age_bx<-69.4#
sd_age_bx<-6.5#
knots_age_bx<- c(-0.5, 0.1, 0.7)#
#
knots_time_bx<- c(1.3, 3.2, 5.8)#
#
mean_sec_time_bx<-4.5#
sd_sec_time_bx<-4.1#
knots_sec_time_bx<-c(-0.5,0.3,0.9)#
### SIMULATE DATA#
n <- 1000#
id <- c(1:n)#
#
ages_dx <- rnorm(n, mean=65.5, sd=5.5) #from real data#
sec_time_dx <- rnorm(n, mean=1.6, sd=4.3)  #secular time, in relation to 2005#
pt_data<-as.data.frame(cbind(id,ages_dx, sec_time_dx))#
names(pt_data) <- c("id","age_dx","sec_time_dx")#
#
#latent class#
pt_data$eta_true <- eta_true <- rbinom(n,1,p_eta)#
table(pt_data$eta_true)#
### all biopsy data#
#
times<-seq(1,10,1)#
#
ids<-c(rep(1,10))#
for(i in 2:n){ids<-c(ids,rep(i,10))}#
#
bx_sim<-as.data.frame(cbind(ids, rep(times,n)))#
names(bx_sim)<-c("id","time")#
#
(N<-dim(bx_sim)[1])#
#
bx_sim$eta<-rep(0,N)#
for(i in 1:n){#
	bx_sim$eta[bx_sim$id==i]<-pt_data$eta_true[pt_data$id==i]}#
#
bx_sim$age<-bx_sim$sec_time<-rep(0,N)#
for(i in 1:n){#
	bx_sim$age[bx_sim$id==i]<-pt_data$age_dx[i] + bx_sim$time[bx_sim$id==1] + 0.5#
	bx_sim$sec_time[bx_sim$id==i]<-pt_data$sec_time_dx[i] + bx_sim$time[bx_sim$id==1] + 0.5}#
#
bx_sim$age_std<-(bx_sim$age-mean_age_bx)/sd_age_bx#
bx_sim$age_ns<-get_ns_basis(bx_sim$age_std, knots_age_bx)#
#
bx_sim$time_ns<-get_ns_basis(bx_sim$time,knots_time_bx)#
#
bx_sim$sec_time_std<-(bx_sim$sec_time-mean_sec_time_bx)/sd_sec_time_bx#
bx_sim$sec_time_ns<-get_ns_basis(bx_sim$sec_time, knots_sec_time_bx)#
#
bx_sim$rm<-rep(0,N)#
##biopsies#
bx_sim$bx_here<-rep(0,N)#
bx_sim$num_prev_bx<-rep(1,N)#
#
bx_sub<-bx_sim[bx_sim$time==1,]#
(n_bx<-dim(bx_sub)[1])#
U_BX<-as.matrix(cbind( rep(1,n_bx), bx_sub$age_std, bx_sub$age_ns, bx_sub$time, bx_sim$time_ns,  bx_sub$sec_time_std, bx_sub$sec_time_ns, bx_sub$num_prev_bx, bx_sub$eta  ))#
summary(as.vector(expit(U_BX%*%nu_bx)))#
#
bx_sim$bx_here[bx_sim$time==1]<-rbinom(n,1,as.vector(expit(U_BX%*%nu_bx)))#
#table(bx_sim$bx_here[bx_sim$time==1])#
#
for(j in 2:10){#
	for(i in 1:n){#
		bx_sim$num_prev_bx[bx_sim$id==i & bx_sim$time==j]<-sum(bx_sim$bx_here[bx_sim$id==i & bx_sim$time<j]) + 1}#
#
	bx_sub<-bx_sim[bx_sim$time==j,]#
	(n_bx<-dim(bx_sub)[1])#
	U_BX<-as.matrix(cbind( rep(1,n_bx), bx_sub$age_std, bx_sub$age_ns, bx_sub$time, bx_sim$time_ns,  bx_sub$sec_time_std, bx_sub$sec_time_ns, bx_sub$num_prev_bx, bx_sub$eta  ))#
	bx_sim$bx_here[bx_sim$time==j]<-rbinom(n,1,as.vector(expit(U_BX%*%nu_bx)))}#
table(bx_sim$bx_here)	#
#
#reclassifications#
bx_sim$rc<-bx_sim$prev_G7<-rep(0,N)#
rc_sub<-bx_sim[bx_sim$bx_here==1,]#
(n_rc<-dim(rc_sub)[1])#
V_RC<-as.matrix(cbind(rep(1,n_rc), rc_sub$age_std, rc_sub$time, rc_sub$time_ns, rc_sub$sec_time_std, rc_sub$eta))#
#
bx_sim$rc[bx_sim$bx_here==1]<-rbinom(n_rc,1,as.vector(expit(V_RC%*%gam_rc)))#
#
for(i in 1:n){#
	if(sum(bx_sim$rc[bx_sim$id==i]==1)>0){#
		rc_time<-min(bx_sim$time[bx_sim$rc==1 & bx_sim$id==i])#
		bx_sim$rc[bx_sim$id==i & bx_sim$time>rc_time]<-0#
		bx_sim$bx_here[bx_sim$id==i & bx_sim$time>rc_time]<-0#
		bx_sim$num_prev_bx[bx_sim$id==i & bx_sim$time>rc_time]<-(bx_sim$num_prev_bx[bx_sim$id==i & bx_sim$time==rc_time] + 1)#
		bx_sim$prev_G7[bx_sim$id==i & bx_sim$time>=rc_time]<-1#
		bx_sim$rm[bx_sim$id==i & bx_sim$time>(rc_time+2)]<-1}}#
# surgery#
bx_sim$surg<-rep(0,N) #
bx_sim$num_prev_bx_surg <- bx_sim$num_prev_bx + bx_sim$bx_here#
#
W_SURG<-as.matrix(cbind(rep(1,N), bx_sim$age_std, bx_sim$age_ns, bx_sim$time, bx_sim$time_ns, bx_sim$sec_time_std, bx_sim$sec_time_ns,bx_sim$num_prev_bx_surg, bx_sim$prev_G7, bx_sim$eta, (bx_sim$prev_G7*bx_sim$eta) ))#
#
bx_sim$surg<-rbinom(N,1,as.vector(expit(W_SURG%*%omega_surg)))#
#
#messes up design matrices to delete columns earlier#
bx_sim<-bx_sim[bx_sim$rm==0,]#
(N<-dim(bx_sim)[1])#
pt_data$rc<-pt_data$surg<-rep(0,n)#
#
for(i in 1:n){#
	if(sum(bx_sim$surg[bx_sim$id==i])>0){#
		surg_time<-min(bx_sim$time[bx_sim$id==i & bx_sim$surg==1])#
		bx_sim$rm[bx_sim$id==i & bx_sim$time>surg_time]<-1	#
		pt_data$surg[pt_data$id==i]<-1}	}#
table(pt_data$surg)#
bx_sim<-bx_sim[bx_sim$rm==0,]#
(N<-dim(bx_sim)[1])#
#
for(i in 1:n){#
	pt_data$rc[i]<-sum(bx_sim$rc[bx_sim$id==pt_data$id[i]])}#
table(pt_data$rc) #
#
pt_data$obs_eta<-rep(NA,n)#
pt_data$obs_eta[pt_data$surg==1]<-pt_data$eta_true[pt_data$surg==1]#
table(pt_data$obs_eta)#
#
for(i in 1:n){#
	if(max(bx_sim$rc[bx_sim$id==i])==1){#
		rc_time<-bx_sim$time[bx_sim$rc==1 & bx_sim$id==i]#
		bx_sim$bx_here[bx_sim$id==i & bx_sim$time>rc_time]<-NA	} }#
#
table(bx_sim$bx_here)#
##psa data#
#
psa_time<-seq(-1, max(bx_sim$time[bx_sim$id==1]),0.5)#
psa_id<-rep(1, length(psa_time))#
#
for(i in 2:n){#
	psa_add<-seq(-1, max(bx_sim$time[bx_sim$id==i]), 0.5)#
	psa_time<-c(psa_time,psa_add)#
	psa_id<-c(psa_id, rep(i, length(psa_add)))}	#
psa_data<-as.data.frame(cbind(psa_id, psa_time))#
names(psa_data)<-c("id","psa_time")#
(n_obs_psa<-dim(psa_data)[1])#
#
psa_data$psa_time<-psa_data$psa_time + runif(n_obs_psa, min=-0.25, max=0.25)#
psa_data$age<-vector(length=n_obs_psa)#
for(j in 1:n_obs_psa){#
	psa_data$age[j] <- psa_data$psa_time[j] + pt_data$age[pt_data$id==psa_data$id[j]]}#
mean(psa_data$age) #69.53362#
sd(psa_data$age) #6.624688#
psa_data$age_std<-(psa_data$age-mean(psa_data$age))/sd(psa_data$age)#
#
pt_data$vol_std<-rnorm(n,0,1)#
psa_data$vol_std<-vector(length=n_obs_psa)#
for(i in 1:n){#
	psa_data$vol_std[psa_data$id==i] <- pt_data$vol_std[i]}#
#
b.vec <- matrix(nrow=n, ncol=2)#
for(i in 1:n){#
	b.vec[i,] <- mvrnorm(n=1, mu=mu_mat[,(pt_data$eta_true[pt_data$id==i]+1)], Sigma=Sigma)}#
psa_data$log_psa <- vector(length=n_obs_psa)#
for(j in 1:n_obs_psa){#
	lin_pred <- NULL#
	lin_pred <- sum(b.vec[pt_data$id==psa_data$id[j],] * c(1, psa_data$age_std[j])) + beta[1]*psa_data$vol_std[j]#
	psa_data$log_psa[j] <- rnorm(1, mean=lin_pred, sd=sigma_res)}#
summary(psa_data$log_psa)#
#get ordered subject variable#
#
pt_data<-pt_data[order(pt_data$obs_eta),]#
pt_data$subj<-c(1:n)#
psa_data$subj<-rep(0,n_obs_psa)#
for(i in 1:n){psa_data$subj[psa_data$id==pt_data$id[i]]<-pt_data$subj[i]}#
bx_sim$subj<-rep(0,N)#
for(i in 1:n){bx_sim$subj[bx_sim$id==pt_data$id[i]]<-pt_data$subj[i]}#
write.csv(psa_data,"psa-data-sim.csv")#
write.csv(pt_data,"pt-data-sim.csv")#
write.csv(bx_sim,"bx-data-sim.csv")
